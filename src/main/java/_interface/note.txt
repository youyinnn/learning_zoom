接口的特性：
    1、接口不是类，不能new，但是可以声明接口变量，接口变量必须引用实现了该接口的类对象。
    2、可以用instanceof检查某个类是否实现了某个特定接口。
    3、与类一样，接口可以建立继承关系而被拓展，可以设计存在具有高通用性的接口到高专用性的接口的链。
    4、接口中不能包含实例域或静态方法。
    5、接口中可以包含常量。
    6、接口中的方法都自动被设置为public，接口中的域自动被设为public static final。

静态方法：
    在Java8中，允许增加静态方法。

默认方法：
    可以为接口方法提供默认实现，方法需要用default修饰。

默认方法的意义是：“接口演化（interface evolution）”，假如一个接口已经使用很多年了，当要对这个接口本身进行更新，
                    而不是新写一个接口的时候，就需要加方法，这个时候，以前实现了这个接口的类就无法编译了，因为他没有实现
                    这个新方法，这样不能保证“源代码兼容（source compatible）”。
                    这个时候，将方法实现为默认方法就可以解决这个问题。

如果在超类中有一个和接口一模一样的方法，则根据以下规则解决冲突，总体来说是“类优先”规则
方法冲突解决规则：
    1、超类优先，默认方法会被忽略。
    2、如果一个超接口提供了一个默认方法，另一个接口提供了一样的方法，则必须覆盖这个方法。

注意：默认方法绝对不能重新定义Object中的方法，因为“类优先”规则，任何方法都不会超越Object.Xxx()